
const Helpers = {
    stripHttp(url) {
        return url.replace(/^https?:/, '');
    },
};
const VtexHelpers = {
    formatPrice(number, thousands, decimals, length, currency) {
        currency = typeof currency == 'string' ? currency : 'R$ ';
        length = typeof length !== 'number' ? 2 : length;

        const re = '\\d(?=(\\d{' + (3) + '})+' + (length > 0 ? '\\D' : '$') + ')';
        number = number / 100;
        number = (number * 1).toFixed(Math.max(0, ~~length));

        return currency + number.replace('.', (decimals || ',')).replace(new RegExp(re, 'g'), '$&' + (thousands || '.'));
    },

    getResizedImage(src, width, height) {
        if ( width === undefined || height === undefined || typeof src != 'string' ) {
            return src;
        }

        src = src.replace(/(?:ids\/[0-9]+)-([0-9]+)-([0-9]+)\//, function(match, matchedWidth, matchedHeight) {
            return match.replace('-' + matchedWidth + '-' + matchedHeight, '-' + width + '-' + height);
        });

        return src.replace(/(ids\/[0-9]+)\//, '$1-' + width + '-' + height + '/');
    },
};

(($) => {
    'use strict';

    let VtexMinicart = function(element, option) {
        let defaults = {};

        this.option = $.extend({}, defaults, option);
        this.$element = $(element);
        this.init();
    };

    VtexMinicart.prototype = {
        data: {
            items: {},
            itemCount: 0,
        },

        init() {
            this.bindData();
            this.fillCart();
            this.updateItem();
            this.removeItem();
            this.checkoutLink();
            this.rivetsFormatters();
        },

        bindData() {
            const El = $(document).find('.js--minicart');

            rivets.bind(El, {
                controller: VtexMinicart,
                data: this.data,
            });
        },

        fillCart() {
            vtexjs.checkout.getOrderForm().done((orderForm) => {
                this.$element.find('.js--minicart-subtotal').html(`R$ ${VtexHelpers.formatPrice(orderForm.value)}`);
                this.data.itemCount = orderForm.items.length;
                this.data.items = orderForm.items;

                if ( this.data.itemCount > 0 ) {
                    $('.js--minicart-checkout').removeClass('is--disabled');

                    const sumQuantity = orderForm.items.reduce((acc, obj) => acc + obj.quantity, 0);
                    $('.js--minicart-amount').text(sumQuantity);

                    orderForm.items.map((item, index) => {
                        vtexjs.catalog.getProductWithVariations(item.productId).done((product) => {
                            const variantInfo = product.skus.filter((sku) => parseInt(sku.sku) === parseInt(item.id));
                            const productDimension = product.dimensions;
                            const variants = productDimension.map((dimension) => ({[dimension]: variantInfo[0].dimensions[dimension]}) ); // First dimension (Make map)

                            if ( item.sellingPrice === item.listPrice ) {
                                this.data.items[index].listPrice = 0;
                            }

                            this.data.items[index].index = index;
                            this.data.items[index].variants = variantInfo[0].dimensions;
                        });
                    });
                } else {
                    $('.js--minicart-checkout').addClass('is--disabled');
                    $('.js--minicart-amount').text(0);

                    // this.$element.find('.js--minicart-items').append(`
                    //     <li class="x-minicart__empty">
                    //         <p class="x-minicart__empty-text">Você não possui produtos na sua sacola</p>
                    //     </li>
                    // `);
                }
            });
        },

        removeItem() {
            $(document).on('click', '.js--minicart-item-remove', (ev) => {
                const index = $(ev.currentTarget).data('minicartIndex');
                this._removeItem(index);
            });
        },

        updateItem() {
            $(document).on('click', '.js--minicart-item-qty-btn', (ev) => {
                ev.preventDefault();
                const $this = $(ev.currentTarget);
                const _qtyItemVal = $this.parent().find('.js--minicart-item-qty-val');
                const index = _qtyItemVal.data('minicartIndex');
                let oldValue = _qtyItemVal.val();
                let newVal = 0;

                if ( $this.data('minicartItemQty') === '+' ) {
                    newVal = parseFloat(oldValue) + 1;
                } else {
                    if ( oldValue > 0 ) {
                        newVal = parseFloat(oldValue) - 1;
                        if ( newVal === 0 ) {
                            this._removeItem(index);

                            return;
                        }
                    } else {
                        newVal = 0;
                    }
                }

                this._updateItem(index, newVal);
                setTimeout(() => {
                    $this.parent().find('.js--minicart--item-qty-val').val(newVal);
                }, 500);
            });
        },

        checkoutLink() {
            $(document).on('click', '.js--minicart-checkout', (ev) => {
                if ( $(ev.currentTarget).hasClass('is--disabled') ) {
                    return false;
                }

                return true;
            });
        },

        _removeItem(index) {
            vtexjs.checkout.getOrderForm().then((orderForm) => {
                this._addLoader();

                let item = orderForm.items[index];
                item.index = index;

                return vtexjs.checkout.removeItems([item]);
            }).done((orderForm) => {
                this.fillCart();
                this._removeLoader();

                if ( orderForm.items.length < 1 ) {
                    this.$element
                        .add($('.js--overlay'))
                        .removeClass('is--active');
                }
            });
        },

        _updateItem(index, quantity) {
            vtexjs.checkout.getOrderForm().then((orderForm) => {
                this._addLoader();

                const updateItem = {
                    index: index,
                    quantity: quantity,
                };

                return vtexjs.checkout.updateItems([updateItem], null, false);
            }).done((orderForm) => {
                this.fillCart();
                this._removeLoader();
            });
        },

        openCart() {
            window.console.log('OpenCart');
        },

        _addLoader() {
            $('body').addClass('has--loader');
        },

        _removeLoader() {
            $('body').removeClass('has--loader');
        },

        rivetsFormatters() {
            rivets.formatters.formatPrice = (val) => VtexHelpers.formatPrice(val);
            rivets.formatters.productImgSize = (val, arg1, arg2) => VtexHelpers.getResizedImage(val, arg1, arg2);
        }
    };

    $.fn.vtexMinicart = function(option) {
        let arg = arguments;
        let options = typeof option === 'object' && option;


        return this.each((ev) => {
            const $this = $(this);
            let data = $this.data('vtexMinicart');

            if ( ! data ) {
                $this.data('vtexMinicart', (
                    data = new VtexMinicart(this, options)
                ));
            }

            if ( typeof option === 'string' ) {
                if ( arg.length > 1 ) {
                    data[option].apply(data, Array.prototype.slice.call(arg, 1));
                } else {
                    data[option]();
                }
            }
        });
    };
})(jQuery);

$(() => {
    $('.js--minicart').addClass('is--active');
    $('.js--minicart').vtexMinicart();
});
